# --- begin robust Base import ---
import os, sys, pathlib
REPO_ROOT = str(pathlib.Path(__file__).resolve().parents[2])
if REPO_ROOT not in sys.path:
    sys.path.insert(0, REPO_ROOT)

Base = None
for dotted in (
    "backend.models.base",   # common
    "backend.db",            # some repos use this
    "app.models.base",       # if models live under app/
    "app.db",                # another common variant
    "backend.core.db",       # add more candidates as needed
    "backend.core.models"
):
    try:
        mod = __import__(dotted, fromlist=["Base"])
        Base = getattr(mod, "Base", None)
        if Base is not None:
            break
    except Exception:
        pass

if Base is None:
    raise ImportError("Could not import Base from any known location. Update alembic/env.py candidates.")
# --- end robust Base import ---
from __future__ import annotations
import os
from logging.config import fileConfig
from pathlib import Path

from sqlalchemy import engine_from_config, pool
from alembic import context

# Load .env (../.. from this file)
ENV_PATH = Path(__file__).resolve().parents[2] / ".env"
if ENV_PATH.exists():
    try:
        from dotenv import load_dotenv
        load_dotenv(ENV_PATH)
    except Exception:
        pass

config = context.config

if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# (patched) Base import handled above

target_metadata = Base.metadata

def run_migrations_offline() -> None:
    url = os.getenv("DATABASE_URL") or config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        config.set_main_option("sqlalchemy.url", database_url)

    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
        future=True,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


